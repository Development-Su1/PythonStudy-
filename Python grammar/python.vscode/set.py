# 세트 (set, 집합)
# 세트는 중복을 허용하지 않으며 또한 데이터의 순서도 보장하지 않습니다.  >> 같은 값은 여러 번 적어도 딱 한 번만 들어감.
# 중괄호를 이용 >> {value1, value2, ...}

my_set = {1, 2, 3, 3, 3}   # 중복을 허용하지 않으므로 3은 1번만 들어감
print(my_set)

# 정수, 문자열 등 다양한 형태의 값을 선언할 수 있으며, 중괄호 대신 set() 를 이용하는 방법도 있습니다.
java = {"유재석", "김태호", "양세형"}  # 자바 개발자 집합
python = set({"유재석", "박명수"})  # 파이썬 개발자 집합

# 교집합은 & 기호나 .intersection() 을 이용하면 됩니다. 
# 교집합 (java 와 python 을 모두 할 수 있는 개발자)
print(java & python)  # {'유재석'}
print(java.intersection(python))  # {'유재석'}

# 두 집합을 합치는 합집합은 키보드의 백스페이스 근처에 있는 | 기호나 .union() 을 이용하면 됩니다. 
# 자바 또는 파이썬 중 하나라도 다룰 줄 아는 개발자를 출력해보겠습니다. 
# 이 때 두 집합에 공통으로 있는 값(예제에서는 유재석씨) 은 중복을 허용하지 않으므로 1번만 출력됩니다.
# 합집합 (java 또는 python 을 할 수 있는 개발자)
print(java | python)   # {'박명수', '유재석', '김태호', '양세형'}
print(java.union(python))   # {'박명수', '유재석', '김태호', '양세형'}

# 자바만 할 줄 아는 인력들만 확인해보겠습니다. 
# 이 때는 차집합을 이용할 수 있는데, - 기호 또는 difference() 를 이용하면 됩니다.
# 차집합 (java 는 할 수 있지만 python 은 할 줄 모르는 개발자)
print(java - python)  # {'양세형', '김태호'}
print(java.difference(python))  # {'양세형', '김태호'}

# 파이썬 교육을 마친 후에 시험을 봤는데 아쉽게도 양세형씨는 탈락하고 김태호씨는 합격을 했다고 가정하겠습니다. 
# 그러면 김태호씨는 파이썬 개발 프로젝트에 참여를 할 수 있기 때문에 add() 를 이용하여 파이썬 개발자 집합에 추가.
# python 개발자 추가 (기존 개발자 : 박명수, 유재석)
python.add("김태호")
print(python)  # {'박명수', '유재석', '김태호'}

# 김태호씨가 파이썬 공부를 너무 열심히 한 탓인지 원래 할 줄 알던 자바를 잊었다고 합니다. 
# 아쉽지만 remove() 를 이용하여 자바 개발자 집합에서 제외를 해야겠네요.
# java 개발자 삭제 (기존 개발자 : 유재석, 김태호, 양세형)
java.remove("김태호")
print(java)  # {'유재석', '양세형'}
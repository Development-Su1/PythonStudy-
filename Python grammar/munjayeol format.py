#문자열 포맷
# + 를 이용하면 문자열들 사이에 띄어쓰기가 없고 , 를 이용하면 띄어쓰기로 구분되어 문자열이 출력되지요.
print("a" + "b") # ab
print("a" , "b") # a b

# 다양한 포맷으로 문자열을 출력하는 방법

# [방법1 = %]
# %d 는 정수(decimal)
# %c 는 문자(character) 
# %s 는 문자열(string) 일반적으로는 집어 넣으려는 값의 자료형에 따라 다르게 지정해야 합니다.
# %s 를 쓰게 되면 정수, 문자, 문자열 상관 없이 모든 값을 집어 넣을 수 있습니다.

print("나는 %d살 입니다." % 22)
print("나는 %s을 좋아합니다." % "파이썬")
print("Apple은 %c로 시작합니다." % "A")
print("adult는 %c로 시작합니다." % "a")

# 문자열 내에 2개 이상의 값을 넣으려고 한다면 문자열 이후에 오는 % 뒤의 값들을 괄호로 감싸고 콤마로 구분
print("나는 %s색과 %s색을 좋아합니다." %("파란", "노란"))

# [방법2 = .format()]
# { } 만 넣으면 순서대로 값1, 값2, ... 가 들어감
# {0}, {1} 과 같이 인덱스 값을 의미하는 숫자를 넣게 되면 {0} 위치에는 값1, {1} 위치에는 값2
# {1}, {0} 과 같이 숫자를 뒤집으면 입력한 값도 뒤집혀서 나오게 됨
print("나는 {}살 입니다." .format(22))
print("나는 {}색과 {}색을 좋아합니다." . format("빨간", "노란"))
print("나는 {0}색과 {1}색을 좋아합니다." .format("빨간", "노란"))
print("나는 {1}색과 {0}색을 좋아합니다." .format("빨간", "노란"))

# [방법3 = 이름]
# 문자열 내에 {이름} 과 같이 넣어서 마치 변수를 사용하는 것처럼 함.
# .format 내에서 이름과 값을 정의해두면, 그 이름에 해당하는 부분에 값을 집어넣게 됩니다.
print("나는 {age}살이며, {color}색을 좋아합니다." .format(age = 22, color = "빨간"))

# .format 뒤에 순서를 변경해도 괜찮아요.
print("나는 {age}살이며, {color}색을 좋아합니다." .format(color = "빨간", age = 22))

# [방법4 = f-string]
# 문자열 앞에 f 를 추가해주면, 앞에서 선언된 변수 이름을 그대로 사용할 수 있습니다.
age = 22
color = "파란"
print(f"나는 {age}살이며, {color}색을 좋아합니다.")